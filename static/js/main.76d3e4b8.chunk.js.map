{"version":3,"sources":["components/SplashPage.js","components/MapComponent.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["SplashPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","handleStartStop","bind","assertThisInitialized","setTimeout","setState","react_default","a","createElement","id","src","react_router","to","React","Component","MapComponent","fetchPlaces","mapProps","map","google","service","maps","places","PlacesService","request","location","mainPlace","radius","type","nearbySearch","results","status","console","log","PlacesServiceStatus","OK","_loop","place","i","marker","Marker","position","geometry","title","name","getDetails","placeId","place_id","fields","details","infoWindow","InfoWindow","content","String","raw","_templateObject","addListener","open","length","lat","lng","dist","style","width","height","zoom","onReady","initialCenter","GoogleApiWrapper","apiKey","Home","components_MapComponent","App","className","react_router_dom","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76d3e4b8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nclass SplashPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          count: true\r\n        }\r\n        this.handleStartStop = this.handleStartStop.bind(this);\r\n        setTimeout(this.handleStartStop, 2000)\r\n      }\r\n    \r\n      handleStartStop() {\r\n          this.setState({\r\n            count: false\r\n          })\r\n          //esta funcion se ejecuta cada 2 seg.\r\n    \r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div>\r\n    \r\n            <div>\r\n              <h1 id=\"timer-label\">FOODMAP</h1>\r\n              <p id=\"time-left\">\r\n                {this.state.count ?(\r\n                  <img src='https://vignette.wikia.nocookie.net/plantsvszombies/images/5/56/Pizza_loading.gif/revision/latest?cb=20170408195505' />\r\n                ) : (\r\n                  <Redirect to=\"/Home\"/>\r\n                )\r\n                 \r\n                } \r\n                </p>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    \r\n}\r\n\r\nexport default SplashPage;","import React from \"react\";\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nclass MapComponent extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      mainPlace: { lat: 20.650483, lng: -103.4054717 }\r\n    };\r\n  }\r\n\r\n  fetchPlaces = (mapProps, map) => {\r\n    const { google } = mapProps;\r\n    const service = new google.maps.places.PlacesService(map);\r\n    var request = {\r\n      location: this.state.mainPlace,\r\n      radius: 1000,\r\n      type: [\"restaurant\"]\r\n    };\r\n    service.nearbySearch(request, function(results, status) {\r\n      console.log(results);\r\n\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        for (var i = 0; i < results.length; i++) {\r\n          const place = results[i];\r\n          const marker = new google.maps.Marker({\r\n            position: place.geometry.location,\r\n            map: map,\r\n            title: place.name\r\n          });\r\n\r\n          service.getDetails(\r\n            {\r\n              placeId: place.place_id,\r\n              fields: [\r\n                \"address_component\",\r\n                \"adr_address\",\r\n                \"formatted_address\",\r\n                \"geometry\",\r\n                \"icon\",\r\n                \"name\",\r\n                \"permanently_closed\",\r\n                \"photo\",\r\n                \"place_id\",\r\n                \"plus_code\",\r\n                \"type\",\r\n                \"url\",\r\n                \"utc_offset\",\r\n                \"vicinity\",\r\n                \"formatted_phone_number\",\r\n                \"international_phone_number\",\r\n                \"opening_hours\",\r\n                \"website\",\r\n                \"price_level\",\r\n                \"rating\",\r\n                \"review\",\r\n                \"user_ratings_total\"\r\n              ]\r\n            },\r\n            function(details) {\r\n              console.log(details);\r\n            }\r\n          );\r\n          const infoWindow = new google.maps.InfoWindow({\r\n            content: String.raw`<h1>${place.name}</h1>\r\n            `\r\n          });\r\n          marker.addListener(\"click\", function() {\r\n            infoWindow.open(map, marker);\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const style = {\r\n      width: \"100%\",\r\n      height: \"40%\"\r\n    };\r\n    return (\r\n      <Map\r\n        style={style}\r\n        google={this.props.google}\r\n        zoom={16}\r\n        onReady={this.fetchPlaces}\r\n        initialCenter={this.state.mainPlace}\r\n      >\r\n      \r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyC0VLXysIX4t0QzQlWFO0VIUyFfRZLV8nA\"\r\n})(MapComponent);\r\n","import React from \"react\";\r\nimport MapComponent from \"./MapComponent\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MapComponent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport SplashPage from \"./components/SplashPage\";\r\nimport Home from \"./components/Home\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Router>\r\n          <Route path=\"/\" component={SplashPage} exact />\r\n          <Route path=\"/Home\" component={Home} />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}